import utils as u
import vk
import os
import sys

from functools import lru_cache
WAIT_TIME = u.WAIT_TIME
# Intialize constants
# Initialize vk api


if not os.path.exists('params.json'):
    u.exit_with_error("Файл params.json не найден; Создайте файл и повторите попытку")
    sys.exit(1)

params = u.json_read('params.json')

session = vk.AuthSession(**params)
api = vk.API(session,v='4.104')
_fwd_id = 0

# Initialize functions
# Returns FN LN by user object
def gen_name(user):
    return user['first_name'] + ' ' + user['last_name']

def gen_dir_name(user):
    return u.transliterate(user['first_name']) + '_' + u.transliterate(user['last_name']) + '_' + str(user['uid'])

# Returns user object by id, myself by default
@lru_cache(maxsize=64)
def get_user(uid=-1):
    u.sleep(WAIT_TIME)
    if uid == -1:
        return api.users.get(fields="photo_100")[0]
    else:
        data = api.users.get(uids=uid, fields="photo_100")
        if len(data) == 0:
            return {"first_name":"Пользователь","last_name":"Не найден", "photo_100":"https://vk.com/images/deactivated_100.png","uid":1,"id":1}
        else:
            return data[0]
# Returns group object by id
@lru_cache(maxsize=64)
def get_group(to_id):
    u.sleep(WAIT_TIME)
    return api.groups.getById(group_id=-to_id)[0]

# Returns all user dialogs
@u.redo
def get_dialogs():
    all_dialogs = []
    u.print_pb(0)
    data = api.messages.getDialogs(count=200, offset=0)
    dialogs_count = data[0]
    dialogs = data[1:]
    all_dialogs += dialogs
    offset = 200
    u.print_pb(len(all_dialogs)/dialogs_count)
    while len(all_dialogs) != dialogs_count:
        u.sleep(WAIT_TIME)
        dialogs = api.messages.getDialogs(count=200,offset=offset)[1:]
        all_dialogs += dialogs
        offset += 200
        u.print_pb(len(all_dialogs)/dialogs_count)
    print()
    return all_dialogs

# Returns all private messages with uid
@u.redo
def get_private_messages(uid):
    all_messages = []
    u.print_pb(0)
    data = api.messages.getHistory(user_id=uid, count=200, offset=0)
    messages_count = data[0]
    messages = data[1:]
    all_messages += messages
    u.print_pb(len(all_messages)/messages_count)
    offset = 200
    while len(all_messages) != messages_count:
        u.sleep(WAIT_TIME)
        messages = api.messages.getHistory(user_id = uid,count=200,offset=offset)[1:]
        all_messages += messages
        offset += 200
        u.print_pb(len(all_messages)/messages_count)
    u.print_pb(1)
    print()
    return all_messages

# Returns all messages in chatid
@u.redo
def get_group_messages(chatid):
    all_messages = []
    data = api.messages.getHistory(user_id=2000000000+chatid, count=200, offset=0)
    messages_count = data[0]
    messages = data[1:]
    all_messages += messages
    offset = 200
    while len(all_messages) != messages_count:
        u.sleep(WAIT_TIME)
        messages = api.messages.getHistory(user_id=2000000000+chatid,count=200,offset=offset)[1:]
        all_messages += messages
        offset += 200
    return all_messages

# Returns trub and photo for attachment
def gen_trub_and_photo(attach_data):
    values = 'src_big src_xbig src_xxbig src_xxxbig'.split()
    ans = [0, 0]
    for f in values:
        if f in attach_data:
            ans[0] = attach_data[f]
            break
    for f in reversed(values):
        if f in attach_data:
            ans[1] = attach_data[f]
            break
    return ans

# Returns div (html-tag) generated by message
@u.redo
def gen_div_by_message(message, sender, forwarded=False):
    global _fwd_id

    if forwarded:
        message['out'] = 1
        message['mid'] = _fwd_id
        _fwd_id += 1

    
    div = '<div id="msg{mid}" class="msg_item {own}">'.format(
        mid=message['mid'], own='message')
    div += '<div class="upic"><img src="{photo}" alt="[photo_100]"></div>'.format(
        photo=sender['photo_100'])

    div += '<div class="from">'
    # Message head
    div += '''<b>{name}</b> 
              <a href="http://vk.com/id{id}" target="_blank">@id{id}</a> <a href="#msg{mid}">{date}</a>
              </div>'''.format(name=gen_name(sender), id=sender['uid'], mid=message['mid'], date=u.gen_time(message['date']))

    # Message text
    div += '<div class="msg_body">{text}</div>'.format(text=message['body'])
    # Forwarded messages
    if 'fwd_messages' in message:
        div += '<div class="fwd">'
        for fwd_message in message['fwd_messages']:
            u.sleep(WAIT_TIME)
            div += gen_div_by_message(fwd_message, get_user(
                fwd_message['uid']), forwarded=True)
        div += '</div>'

    # Attachments
    if 'attachments' in message:
        div += '<div class="attachments" id="attach{mid}">'.format(mid=message[
                                                                   'mid'])

        for attachment in message['attachments']:
            div += gen_attachment(attachment)

        div += '</div>'

        if message['attachments'][0]['type'] == 'photo':
            div += '<script>lightGallery(document.getElementById("attach{mid}"));</script>'.format(
                mid=message['mid'])

    div += '</div>'
    return div

# Generates a div by attachment
@u.redo
def gen_attachment(attachment):
    div = ''
    if attachment['type'] != 'photo':
        div += '<textarea hidden>%s</textarea>'%u.to_json(attachment[attachment['type']])
    if attachment['type'] == 'photo':
        pdata = gen_trub_and_photo(attachment['photo'])
        div += '<a href="{src}"><img class="att_photo" src="{trub}"></a>'.format(trub=pdata[0], src=pdata[1])

    elif attachment['type'] == 'wall': # WALL OF CODE
        if attachment['wall']['to_id'] < 0:
            group = get_group(attachment['wall']['to_id'])
            div += '<div class="msg_item wall">'
            div += '<div class="upic"><img src="{photo}" alt="[photo_100]"></div>'.format(
                photo=group['photo'])
            div += '''<b>{name}</b> 
                  <a href="http://vk.com/wall-{gid}_{wid}" target="_blank">{date}</a>
                  '''.format(name=group['name'], gid=group['gid'], wid=attachment['wall']['id'] , date=u.gen_time(attachment['wall']['date']))
            div += '<div class="msg_body">{text}</div>'.format(
                text=attachment['wall']['text'])

            if 'attachments' in attachment['wall']:
                div += '<div class="attachments" id="attach{mid}">'.format(mid=attachment[
                                                                           'wall']['id'])
                for att in attachment['wall']['attachments']:
                    div += gen_attachment(att)
                div += '</div>'
                if attachment['wall']['attachments'][0]['type'] == 'photo':
                    div += '<script>lightGallery(document.getElementById("attach{mid}"));</script>'.format(
                        mid=attachment['wall']['id'])

            div += '</div>'
    elif attachment['type'] == 'doc':
        if attachment['doc']['title'] == 'Audio Message':
            div += '<video controls=""  name="media"><source src="%s" type="audio/ogg"></video>' % attachment['doc']['url']
        else:
            div += "<a href='%s'>%s</a>"%(attachment['doc']['url'],attachment['doc']['title'])
    elif attachment['type'] == 'link':
        div+= "<a href='%s'>%s</a>" % (attachment['link']['url'],attachment['link']['title'])

    elif attachment['type'] == 'sticker':
        div += '<div class="upic"><img src="{photo}" alt="[sticker_256]"></div>'.format(
            photo=attachment['sticker']['photo_256'])
    else:
        # print(attachment)
        if attachment['type'] != 'photo':
            div += '<textarea>%s</textarea>'%u.to_json(attachment[attachment['type']])
    return div
